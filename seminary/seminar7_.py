"""47. У вас есть код, который вы не можете менять(так часто бывает, когда код в глубине программы 
используется множество раз и вы не хотите ничего сломать):
transformation = <???>
values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
transormed_values = list(map(transformation, values))
Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений,
а нужно получить его как есть.
Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values."""

# values = [1, 23, 42, 'asdfg']
# transformed_values = list(map(lambda x: x, values))
# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')



"""Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет 
самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту
, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет 
нет, зато искусственные спутники были запущены на круговые орбиты. Результатом функции должен быть 
кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя 
кортеж из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, 
где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. Подсказка: 
проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти 
и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна"""


# def find_farthest_orbit(orbits):
#     elipses = list(filter(lambda x: x[0] != x[1], orbits))
#     tmp_s = elipses[0][0] * elipses[0][1]
#     index_max = 0
#     for i in range(1, len(elipses)):
#         if elipses[i][0] * elipses[i][1] > tmp_s:
#             tmp_s = elipses[i][0] * elipses[i][1]
#             index_max = i
#             return elipses[index_max]
#
#
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

"""Если ты много лет подряд был воином Белой розы, если ты не раз участвовал в
кровопролитных битвах между индейцами и бледнолицыми, если ты, наконец, был
разведчиком союзников во второй мировой войне, то ты научился двум вещам: ничему
не удивляться и уметь молчать, когда надо.

Напишите программу, которая найдет отличия между индейцами и бледнолицыми (или
Белой розой и Красной розой, кто их разберет).

Из каждых двух наборов целых чисел выбрать общие, оканчивающиеся на 1 или 3, без
повторений. Вывести в порядке убывания через & окруженный пробелами.

Формат ввода

вводится число п - количество наборов из двух строк, в которых целые числа записаны
через пробел.

Затем 2 * п строк с целыми числами.

Формат вывода

вывести п строк, в которых записаны определенные по указанному правилу числа через
&, окруженный пробелами.

Пример 1

Ввод. Вывод

з мазал
928 21 23 12 41

621 18 26 41 18 23 53 121 & 31
18425 31 15 22 м1

2 13 19 28 12"""


n = int(input())
some_list = [[i for i in input().split() if i[-1] in ('1', '3')] for i in range(2 * n)]
print(some_list)
for ind in range(0, len(some_list) - 1, 2):
    res = list(set(some_list[ind]).intersection(set(some_list[ind + 1])))
    res = list(map(int, res))
    print(*sorted(res, reverse=True), sep=' & ')
